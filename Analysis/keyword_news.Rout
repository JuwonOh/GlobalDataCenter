
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]


Successfully loaded .Rprofile at Sat Mar  9 14:02:41 2019 
R > #########################
R > ## SNU Global Data Center
R > ## 2019 March
R > ## Sooahn Shin & JONG HEE PARK
R > #########################
R > rm(list=ls())
R > 
R > #########################
R > ## package loading
R > #########################
R > library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ tibble  2.0.1       ✔ purrr   0.3.0  
✔ tidyr   0.8.2       ✔ dplyr   0.8.0.1
✔ readr   1.3.1       ✔ stringr 1.4.0  
✔ tibble  2.0.1       ✔ forcats 0.4.0  
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
Warning messages:
1: package ‘tibble’ was built under R version 3.5.2 
2: package ‘purrr’ was built under R version 3.5.2 
3: package ‘dplyr’ was built under R version 3.5.2 
4: package ‘stringr’ was built under R version 3.5.2 
5: package ‘forcats’ was built under R version 3.5.2 
R > library(tidytext)
R > library(SnowballC)
Warning message:
package ‘SnowballC’ was built under R version 3.5.2 
R > library(udpipe)
R > library(lattice)
R > library(wesanderson)
R > 
R > #########################
R > ## user specific working directory setup
R > #########################
R > if(Sys.getenv("LOGNAME") == "park"){
+     setwd("~/Dropbox/BigDataDiplomacy/Code/2019/Analysis")
+     source("~/Github/Sooahn/GlobalDataCenter/Analysis/preprocess_functions.R")
+ 
+ }else{
+     setwd("~/Dropbox/GlobalDataCenter/Analysis")
+     source("preprocess_functions.R")
+ }
R > 
R > #########################
R > ## Data
R > #########################
R > load("news_data.RData")
R > input_data <- news_data
R > month.name <- c("07" ,"08" ,"09" ,"10" ,"11" ,"12", "01", "02" )
R > file.name <- "~/Dropbox/BigDataDiplomacy/보고서/2019/plots/news"
R > subtitle = "2018.7 - 2019.3"
R > input = "News"
R > 
R > #########################
R > ## total frequency plot
R > #########################
R > ## monthly count
R > monthly_n <- news_data %>%
+   group_by(year, month, source) %>%
+   count() %>%
+     mutate(date = as.Date(paste0(year, month, "01"),"%Y%m%d")) %>%
+     ungroup() %>% mutate(source = recode(source, fox = "Fox",
+                                          wsj = "Wall Street Journal",
+                                          nyt = "New York Times",
+                                          wp = "Washington Post"
+                                          ))
R > 
R > 
R > title = paste0("Korea-related ", input,  " Article Frequency") ; 
R > p0 <- ggplot(monthly_n) + 
+     geom_bar(aes(x=date, y=n), stat="identity", alpha=0.2) +
+     geom_line(aes(x=date, y=n, alpha=source, col=source), size=1) +
+     geom_point(aes(x=date, y=n, size=source, col=source), alpha=0.6) +
+     scale_shape_manual(values = c(1:length(unique(monthly_n$source)))) +
+     scale_x_date(date_breaks = "months" , date_labels = "%Y-%b") + 
+     labs(title=title, subtitle = subtitle, y = "Absolute Frequency", x="Month", 
+          caption = "Copyright: SNU IIS Global Data Center")
R > pdf(file=paste0(file.name, "_totalfreq.pdf"),
+     family="sans", width=12, height=8)
R > p0
Warning messages:
1: Using alpha for a discrete variable is not advised. 
2: Using size for a discrete variable is not advised. 
R > dev.off()
null device 
          1 
R > 
R > #########################
R > ## unigram keyword
R > #########################
R > input_unigrams <- input_data %>%
+   unnest_tokens(ngram, text, token = "ngrams", n = 1) %>%
+   filter(!ngram %in% stop_words$word) %>%
+   mutate(stemmed = wordStem(ngram))
R > 
R > input_unigrams_by_article <- input_unigrams %>%
+   count(id_row, ngram) %>%
+   bind_tf_idf(ngram, id_row, n) %>%
+   arrange(desc(tf_idf)) %>%
+   left_join(input_data[,c("id_row","year","month", "date")]) %>%
+   group_by(year, month, ngram) %>%
+   mutate(n_month = n(), tf_idf_month = sum(tf_idf)) %>%
+   ungroup()
Joining, by = "id_row"
R > 
R > #########################
R > ## bigram keyword
R > #########################
R > input_bigrams <- input_data %>%
+   unnest_tokens(ngram, text, token = "ngrams", n = 2) %>%
+   separate(ngram, c("word1", "word2"), sep = " ") %>%
+   filter(!word1 %in% stop_words$word) %>%
+   filter(!word2 %in% stop_words$word) %>%
+   unite(ngram, word1, word2, sep = " ")
R > 
R > input_bigrams_by_article <- input_bigrams %>%
+   count(id_row, ngram) %>%
+   bind_tf_idf(ngram, id_row, n) %>%
+   arrange(desc(tf_idf)) %>%
+   left_join(input_data[,c("id_row","year","month", "date")]) %>%
+   group_by(year, month, ngram) %>%
+   mutate(n_month = n(), tf_idf_month = sum(tf_idf)) %>%
+     ungroup()
Joining, by = "id_row"
R > 
R > 
R > ## keyword_execution
R > if(Sys.getenv("LOGNAME") == "park"){
+     source("~/Github/Sooahn/GlobalDataCenter/Analysis/keyword_execution.R")
+ 
+ }else{
+     source("keyword_execution.R")
+ }
R > 
R > q()

Goodbye at  Sat Mar  9 14:04:07 2019 
> proc.time()
   user  system elapsed 
 84.099   2.968  87.361 
