
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]


Successfully loaded .Rprofile at Sat Mar  9 14:12:11 2019 
R > #########################
R > ## SNU Global Data Center
R > ## 2019 March
R > ## Sooahn Shin & JONG HEE PARK
R > #########################
R > rm(list=ls())
R > 
R > #########################
R > ## package loading
R > #########################
R > library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ tibble  2.0.1       ✔ purrr   0.3.0  
✔ tidyr   0.8.2       ✔ dplyr   0.8.0.1
✔ readr   1.3.1       ✔ stringr 1.4.0  
✔ tibble  2.0.1       ✔ forcats 0.4.0  
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
Warning messages:
1: package ‘tibble’ was built under R version 3.5.2 
2: package ‘purrr’ was built under R version 3.5.2 
3: package ‘dplyr’ was built under R version 3.5.2 
4: package ‘stringr’ was built under R version 3.5.2 
5: package ‘forcats’ was built under R version 3.5.2 
R > library(tidytext)
R > library(SnowballC)
Warning message:
package ‘SnowballC’ was built under R version 3.5.2 
R > library(udpipe)
R > library(lattice)
R > library(wesanderson)
R > library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

R > 
R > #########################
R > ## user specific working directory setup
R > #########################
R > if(Sys.getenv("LOGNAME") == "park"){
+     setwd("~/Dropbox/BigDataDiplomacy/Code/2019/Analysis")
+     source("~/Github/Sooahn/GlobalDataCenter/Analysis/preprocess_functions.R")
+ 
+ }else{
+     setwd("~/Dropbox/GlobalDataCenter/Analysis")
+     source("preprocess_functions.R")
+ }
R > 
R > 
R > #########################
R > ## Data
R > #########################
R > load("news_data.RData")
R > input_data <- news_data
R > month.name <- c("07" ,"08" ,"09" ,"10" ,"11" ,"12", "01", "02" )
R > file.name <- "~/Dropbox/BigDataDiplomacy/보고서/2019/plots/timeline/news"
R > subtitle = "2018.7 - 2019.3"
R > input = "News"
R > 
R > 
R > #########################
R > ## corpus prep
R > #########################
R > ## unigram keyword
R > input_unigrams <- input_data %>%
+   unnest_tokens(ngram, text, token = "ngrams", n = 1) %>%
+   filter(!ngram %in% stop_words$word) %>%
+   mutate(stemmed = wordStem(ngram))
R > 
R > input_unigrams_by_article <- input_unigrams %>%
+   count(id_row, ngram) %>%
+   bind_tf_idf(ngram, id_row, n) %>%
+   arrange(desc(tf_idf)) %>%
+   left_join(input_data[,c("id_row","year","month", "date")]) %>%
+   group_by(date,ngram) %>%
+   mutate(n_date = n(), tf_idf_date = sum(tf_idf)) %>%
+   group_by(year, month, ngram) %>%
+   mutate(n_month = n(), tf_idf_month = sum(tf_idf)) %>%
+   ungroup()
Joining, by = "id_row"
R > 
R > ## bigram keyword
R > input_bigrams <- input_data %>%
+   unnest_tokens(ngram, text, token = "ngrams", n = 2) %>%
+   separate(ngram, c("word1", "word2"), sep = " ") %>%
+   filter(!word1 %in% stop_words$word) %>%
+   filter(!word2 %in% stop_words$word) %>%
+   unite(ngram, word1, word2, sep = " ")
R > 
R > input_bigrams_by_article <- input_bigrams %>%
+     count(id_row, ngram) %>%
+     bind_tf_idf(ngram, id_row, n) %>%
+     arrange(desc(tf_idf)) %>%
+     left_join(input_data[,c("id_row","year","month", "date")]) %>%
+     group_by(date,ngram) %>%
+     mutate(n_date = n(), tf_idf_date = sum(tf_idf)) %>%
+     group_by(year, month, ngram) %>%
+     mutate(n_month = n(), tf_idf_month = sum(tf_idf)) %>%
+     ungroup()
Joining, by = "id_row"
R > 
R > df.all <- rbind(input_unigrams_by_article, input_bigrams_by_article) 
R > df.unigram <- input_unigrams_by_article
R > df.bigram <- input_bigrams_by_article
R > #########################
R > ## plot
R > #########################
R > ## leaders
R > word.list <- c("moonjaein", "jinping", "abe | abe", "kimjungun")
R > p.list = lapply(1:length(word.list), function(i) {
+     df.bigram %>% filter(str_detect(ngram, word.list[i]))%>%
+         ## filter(ngram%in% word.list[[i]]) %>%
+         select(date, n_month, ngram) %>%
+         distinct() %>%
+         ggplot(., aes(x=as.Date(date), y=n_month, color=ngram), group=ngram) + 
+         geom_point(size=2, alpha=0.9) +
+         scale_x_date(date_minor_breaks = "1 day", date_labels = "%Y-%m") +
+         xlab("Month") + ylab("Absolute Frequency") +
+         theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) + 
+         theme_minimal() +
+         theme(legend.key=element_blank(), legend.key.size=unit(0.5,"point")) +
+         guides(colour=guide_legend(ncol=12)) + 
+         theme(legend.title = element_blank(),legend.text=element_text(size=rel(0.5)),
+               legend.position="bottom") +
+         labs(caption = "Copyright: SNU IIS Global Data Center")
+ })
R > for(i in 1:length(word.list)){
+     pdf(file=paste0(file.name, "_", word.list[[i]], "_bigram.pdf"), family="sans",
+         width = 12, height = 7)
+     print(p.list[[i]])
+     dev.off()
+ }
R > 
R > ## iran is outstanding!
R > word.list <- c("venezuela", "iran", "libya", "iraq")
R > p.list = lapply(1:length(word.list), function(i) {
+     df.bigram %>% filter(str_detect(ngram, word.list[i]))%>%
+         ## filter(ngram%in% word.list[[i]]) %>%
+         select(date, n_month, ngram) %>%
+         distinct() %>%
+         ggplot(., aes(x=as.Date(date), y=n_month, color=ngram), group=ngram) + 
+         geom_point(size=2, alpha=0.9) +
+         scale_x_date(date_minor_breaks = "1 day", date_labels = "%Y-%m") +
+         xlab("Month") + ylab("Absolute Frequency") +
+         theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) + 
+         theme_minimal() +
+         theme(legend.key=element_blank(), legend.key.size=unit(0.5,"point")) +
+         guides(colour=guide_legend(ncol=12)) + 
+         theme(legend.title = element_blank(),legend.text=element_text(size=rel(0.5)),
+               legend.position="bottom") +
+         labs(caption = "Copyright: SNU IIS Global Data Center")
+ })
R > for(i in 1:length(word.list)){
+     pdf(file=paste0(file.name, "_", word.list[[i]], "_bigram.pdf"), family="sans",
+         width = 12, height = 10)
+     print(p.list[[i]])
+     dev.off()
+ }
R > 
R > ## nuclear weapons is outstanding!
R > word.list <- c("denuclearization", "missile", "uranium", "plutonium")
R > p.list = lapply(1:length(word.list), function(i) {
+     df.bigram %>% filter(str_detect(ngram, word.list[i]))%>%
+         ## filter(ngram%in% word.list[[i]]) %>%
+         select(date, n_month, ngram) %>%
+         distinct() %>%
+         ggplot(., aes(x=as.Date(date), y=n_month, color=ngram), group=ngram) + 
+         geom_point(size=2, alpha=0.9) +
+         scale_x_date(date_minor_breaks = "1 day", date_labels = "%Y-%m") +
+         xlab("Month") + ylab("Absolute Frequency") +
+         theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) + 
+         theme_minimal() +
+         theme(legend.key=element_blank(), legend.key.size=unit(0.5,"point")) +
+         guides(colour=guide_legend(ncol=12)) + 
+         theme(legend.title = element_blank(),legend.text=element_text(size=rel(0.5)),
+               legend.position="bottom") +
+         labs(caption = "Copyright: SNU IIS Global Data Center")
+ })
R > for(i in 1:length(word.list)){
+     pdf(file=paste0(file.name, "_", word.list[[i]], "_bigram.pdf"), family="sans",
+         width = 16, height = 10)
+     print(p.list[[i]])
+     dev.off()
+ }
R > 
R > 
R > ## nuclear site
R > word.list <- c("yongbyon", "sino | sino", "hidden site", "ballistic missile")
R > p.list = lapply(1:length(word.list), function(i) {
+     df.bigram %>% filter(str_detect(ngram, word.list[i]))%>%
+         ## filter(ngram%in% word.list[[i]]) %>%
+         select(date, n_month, ngram) %>%
+         distinct() %>%
+         ggplot(., aes(x=as.Date(date), y=n_month, color=ngram), group=ngram) + 
+         geom_point(size=2, alpha=0.9) +
+         scale_x_date(date_minor_breaks = "1 day", date_labels = "%Y-%m") +
+         xlab("Month") + ylab("Absolute Frequency") +
+         theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) + 
+         theme_minimal() +
+         theme(legend.key=element_blank(), legend.key.size=unit(0.5,"point")) +
+         guides(colour=guide_legend(ncol=12)) + 
+         theme(legend.title = element_blank(),legend.text=element_text(size=rel(0.5)),
+               legend.position="bottom") +
+         labs(caption = "Copyright: SNU IIS Global Data Center")
+ })
R > for(i in 1:length(word.list)){
+     pdf(file=paste0(file.name, "_", word.list[[i]], "_bigram.pdf"), family="sans",
+         width = 12, height = 8)
+     print(p.list[[i]])
+     dev.off()
+ }
R > 
R > 

Goodbye at  Sat Mar  9 14:16:12 2019 
> proc.time()
   user  system elapsed 
237.939   3.989 242.035 
